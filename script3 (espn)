from selenium import webdriver
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import pandas as pd

caps = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'


# Set the path to your web driver executable (e.g., chromedriver)
driver_path = 'path_to_chromedriver.exe'

# Initialize a Chrome driver
driver = webdriver.Chrome()

# Open the URL
url = 'https://www.espn.com/nba/boxscore/_/gameId/401584729'
driver.get(url)

# Wait for a few seconds to allow the page to load (you can adjust this time as needed)
driver.implicitly_wait(2)

#get team names
# away_team_element = driver.find_element(By.CSS_SELECTOR, ("div.away span.team-name"))
# home_team_element = driver.find_element(By.CSS_SELECTOR,("div.home span.team-name"))

# # Get the text from the elements
# away_team_name = away_team_element.text
# home_team_name = home_team_element.text

# print(away_team_name, home_team_name)

#define the lists for each stat that we want to record
players = []
minutes = []
field_goals = []
three_pt = []
ft = []
oreb = []
dreb = []
reb = []
assist = []
steal = []
block = []
TO = []
pf = []
plus_minus = []
pts = []

try:
    # Find the player name elements by their class name (you might need to inspect the page to get the correct class name)
    player_name_elements = driver.find_elements(By.CLASS_NAME, "Table__TD")
    big_lst = []
    # Extract and print the player names
    for element in player_name_elements:
        player_name = element.text
        if player_name:
            #print(player_name)
            if player_name[0] in caps and '.' in player_name:
                slash_index = player_name.find("\n")
                players.append(player_name[:slash_index])
        big_lst.append(player_name)

    #mutates the list to start at the actual stats
    pts_index = big_lst.index('PTS')
    starter_stats = big_lst[pts_index+1:]

    #adds the starter stats to the respective list
    for i in range(5):
        minutes.append(starter_stats[0])
        field_goals.append(starter_stats[1])
        three_pt.append(starter_stats[2])
        ft.append(starter_stats[3])
        oreb.append(starter_stats[4])
        dreb.append(starter_stats[5])
        reb.append(starter_stats[6])
        assist.append(starter_stats[7])
        steal.append(starter_stats[8])
        block.append(starter_stats[9])
        TO.append(starter_stats[10])
        pf.append(starter_stats[11])
        plus_minus.append(starter_stats[12])
        pts.append(starter_stats[13])
        starter_stats = starter_stats[14:]
    #defines the bench stats database
    bench_stats = starter_stats[starter_stats.index('PTS')+1:starter_stats.index('STARTERS')]
    
    #adds the bench stats to the respective lists
    for i in range(15):
        if bench_stats[0] == "DNP-COACH'S DECISION": 
            minutes.append(0)
            field_goals.append(0)
            three_pt.append(0)
            ft.append(0)
            oreb.append(0)
            dreb.append(0)
            reb.append(0)
            assist.append(0)
            steal.append(0)
            block.append(0)
            TO.append(0)
            pf.append(0)
            plus_minus.append(0)
            pts.append(0)
            bench_stats = bench_stats[1:]
            if bench_stats[0] != "DNP-COACH'S DECISION":
                break
        else:
            minutes.append(bench_stats[0])
            field_goals.append(bench_stats[1])
            three_pt.append(bench_stats[2])
            ft.append(bench_stats[3])
            oreb.append(bench_stats[4])
            dreb.append(bench_stats[5])
            reb.append(bench_stats[6])
            assist.append(bench_stats[7])
            steal.append(bench_stats[8])
            block.append(bench_stats[9])
            TO.append(bench_stats[10])
            pf.append(bench_stats[11])
            plus_minus.append(bench_stats[12])
            pts.append(bench_stats[13])
            bench_stats = bench_stats[14:]
    
    #defines opponent stats
    opponent_stats = starter_stats[starter_stats.index('STARTERS')+1:]
    opponent_stats = opponent_stats[opponent_stats.index('PTS') + 1:]

    #adds the opponent starter stats
    for i in range(5):
        minutes.append(opponent_stats[0])
        field_goals.append(opponent_stats[1])
        three_pt.append(opponent_stats[2])
        ft.append(opponent_stats[3])
        oreb.append(opponent_stats[4])
        dreb.append(opponent_stats[5])
        reb.append(opponent_stats[6])
        assist.append(opponent_stats[7])
        steal.append(opponent_stats[8])
        block.append(opponent_stats[9])
        TO.append(opponent_stats[10])
        pf.append(opponent_stats[11])
        plus_minus.append(opponent_stats[12])
        pts.append(opponent_stats[13])
        opponent_stats = opponent_stats[14:]

    #defines the opponent bench stats database
    
    opponent_bench_stats = opponent_stats[opponent_stats.index('PTS')+1:]

    #adds opponent bench stats to each according database
    
    while opponent_bench_stats:
        if "DNP" in opponent_bench_stats[0] and "DNP" not in opponent_bench_stats[1]:
            minutes.append(0)
            field_goals.append(0)
            three_pt.append(0)
            ft.append(0)
            oreb.append(0)
            dreb.append(0)
            reb.append(0)
            assist.append(0)
            steal.append(0)
            block.append(0)
            TO.append(0)
            pf.append(0)
            plus_minus.append(0)
            pts.append(0)
            opponent_bench_stats = []
        elif "DNP" in opponent_bench_stats[0]: 
            minutes.append(0)
            field_goals.append(0)
            three_pt.append(0)
            ft.append(0)
            oreb.append(0)
            dreb.append(0)
            reb.append(0)
            assist.append(0)
            steal.append(0)
            block.append(0)
            TO.append(0)
            pf.append(0)
            plus_minus.append(0)
            pts.append(0)
            opponent_bench_stats = opponent_bench_stats[1:]
        
        else:
            minutes.append(opponent_bench_stats[0])
            field_goals.append(opponent_bench_stats[1])
            three_pt.append(opponent_bench_stats[2])
            ft.append(opponent_bench_stats[3])
            oreb.append(opponent_bench_stats[4])
            dreb.append(opponent_bench_stats[5])
            reb.append(opponent_bench_stats[6])
            assist.append(opponent_bench_stats[7])
            steal.append(opponent_bench_stats[8])
            block.append(opponent_bench_stats[9])
            TO.append(opponent_bench_stats[10])
            pf.append(opponent_bench_stats[11])
            plus_minus.append(opponent_bench_stats[12])
            pts.append(opponent_bench_stats[13])
            opponent_bench_stats = opponent_bench_stats[14:]

    #this could export to a text file
    # print(players)
    # with open('output.txt', 'w') as f:
    #     f.write(' '.join(players))

    #gets rid of the string notation:
    # print(len(players))
    # print((minutes))
    # print(len(field_goals))
    # print(len(three_pt))
    # print(len(ft))
    # print(len(oreb))
    # print(len(dreb))
    # print(len(reb))
    # print(len(assist))
    # print(len(steal))
    # print(len(block))
    # print(len(TO))
    # print(len(pf))
    # print(len(plus_minus))
    # print(len(pts))
    for min in minutes:
        min = int(min)
    for oreb1 in oreb:
        oreb1 = int(oreb1)
    for dreb1 in dreb:
        dreb1 = int(dreb1)

    data = {'players': players, 'points': pts, 'minutes': minutes, 'field goals': field_goals, 'three pointers': three_pt, 'free throws': ft, "offensive rebounds": oreb, 'defensive rebounds':
            dreb, 'assists': assist, 'steals': steal, 'blocks': block, 'turnovers': TO, 'personal fouls': pf, 'plus minus': plus_minus}
    df = pd.DataFrame(data)
    print(df)
    home_team_name = ((driver.find_element(By.XPATH, '//*[@id="themeProvider"]/div/div/div[1]/div/div/div[1]/div[2]/div[1]/div[1]/div[1]/div/a/h2')).text)
    opponent_team_name = ((driver.find_element(By.XPATH, '//*[@id="themeProvider"]/div/div/div[1]/div/div/div[3]/div[2]/div[1]/div[1]/div[1]/div/a/h2')).text)
    df.to_csv(f'{home_team_name}vs{opponent_team_name}.csv', index=False)
    

except Exception as e:
    print("An error occurred:", str(e))

finally:
    # Close the browser
    driver.quit()